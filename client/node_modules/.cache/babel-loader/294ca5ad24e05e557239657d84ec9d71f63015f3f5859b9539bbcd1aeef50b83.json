{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\FanYukin\\\\codes\\\\f\\\\noints\\\\client\\\\src\\\\components\\\\Editor\\\\FileOperations.tsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { addNote } from '../../store/notebookSlice';\nimport { z } from 'zod';\nimport DOMPurify from 'dompurify';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Add validation schema\nconst noteContentSchema = z.array(z.object({\n  type: z.string(),\n  children: z.array(z.object({\n    text: z.string()\n  }))\n}));\nexport const FileOperations = ({\n  editor,\n  currentSectionId\n}) => {\n  _s();\n  const dispatch = useDispatch();\n  const handleNewFile = () => {\n    if (!currentSectionId) return;\n    const initialContent = {\n      type: 'paragraph',\n      children: [{\n        text: ''\n      }]\n    };\n    dispatch(addNote({\n      sectionId: currentSectionId,\n      note: {\n        id: Date.now().toString(),\n        title: 'New Note',\n        content: [initialContent],\n        sectionId: currentSectionId,\n        tags: [],\n        createdAt: new Date(),\n        updatedAt: new Date()\n      }\n    }));\n  };\n  const handleOpenFile = e => {\n    var _e$target$files;\n    const file = (_e$target$files = e.target.files) === null || _e$target$files === void 0 ? void 0 : _e$target$files[0];\n    if (!file) return;\n\n    // Add file size limit\n    if (file.size > 5 * 1024 * 1024) {\n      // 5MB limit\n      console.error('File too large');\n      return;\n    }\n\n    // Add file type validation\n    if (!['text/plain', 'text/markdown'].includes(file.type)) {\n      console.error('Invalid file type');\n      return;\n    }\n    const reader = new FileReader();\n    reader.onload = async e => {\n      try {\n        var _e$target;\n        const text = (_e$target = e.target) === null || _e$target === void 0 ? void 0 : _e$target.result;\n        if (typeof text === 'string') {\n          const content = text.split('\\n').map(line => ({\n            type: 'paragraph',\n            children: [{\n              text: DOMPurify.sanitize(line)\n            }]\n          }));\n\n          // Validate content structure\n          const validatedContent = noteContentSchema.parse(content);\n          if (currentSectionId) {\n            dispatch(addNote({\n              sectionId: currentSectionId,\n              note: {\n                id: crypto.randomUUID(),\n                // Use secure ID generation\n                title: DOMPurify.sanitize(file.name),\n                content: validatedContent,\n                sectionId: currentSectionId,\n                tags: [],\n                createdAt: new Date(),\n                updatedAt: new Date()\n              }\n            }));\n          }\n        }\n      } catch (error) {\n        console.error('Error processing file:', error);\n      }\n    };\n    reader.readAsText(file);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex gap-2\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleNewFile,\n      className: \"px-3 py-1 text-sm bg-blue-500 text-white rounded hover:bg-blue-600\",\n      children: \"New File\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      className: \"px-3 py-1 text-sm bg-gray-500 text-white rounded hover:bg-gray-600 cursor-pointer\",\n      children: [\"Open File\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        accept: \".txt,.md\",\n        onChange: handleOpenFile,\n        className: \"hidden\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 5\n  }, this);\n};\n_s(FileOperations, \"rgTLoBID190wEKCp9+G8W6F7A5M=\", false, function () {\n  return [useDispatch];\n});\n_c = FileOperations;\nvar _c;\n$RefreshReg$(_c, \"FileOperations\");","map":{"version":3,"names":["React","useDispatch","addNote","z","DOMPurify","jsxDEV","_jsxDEV","noteContentSchema","array","object","type","string","children","text","FileOperations","editor","currentSectionId","_s","dispatch","handleNewFile","initialContent","sectionId","note","id","Date","now","toString","title","content","tags","createdAt","updatedAt","handleOpenFile","e","_e$target$files","file","target","files","size","console","error","includes","reader","FileReader","onload","_e$target","result","split","map","line","sanitize","validatedContent","parse","crypto","randomUUID","name","readAsText","className","onClick","fileName","_jsxFileName","lineNumber","columnNumber","accept","onChange","_c","$RefreshReg$"],"sources":["C:/Users/FanYukin/codes/f/noints/client/src/components/Editor/FileOperations.tsx"],"sourcesContent":["import React from 'react';\r\nimport { Node } from 'slate';\r\nimport { useDispatch } from 'react-redux';\r\nimport { addNote } from '../../store/notebookSlice';\r\nimport { \r\n  CustomEditor, \r\n  BlockFormatType, \r\n  CustomElement,\r\n  ParagraphElement \r\n} from './types';\r\nimport { z } from 'zod';\r\nimport DOMPurify from 'dompurify';\r\n\r\ninterface FileOperationsProps {\r\n  editor: CustomEditor;\r\n  currentSectionId?: string;\r\n}\r\n\r\n// Add validation schema\r\nconst noteContentSchema = z.array(z.object({\r\n  type: z.string(),\r\n  children: z.array(z.object({\r\n    text: z.string()\r\n  }))\r\n}));\r\n\r\nexport const FileOperations: React.FC<FileOperationsProps> = ({ \r\n  editor, \r\n  currentSectionId \r\n}) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const handleNewFile = () => {\r\n    if (!currentSectionId) return;\r\n    \r\n    const initialContent: ParagraphElement = {\r\n      type: 'paragraph',\r\n      children: [{ text: '' }]\r\n    };\r\n\r\n    dispatch(addNote({\r\n      sectionId: currentSectionId,\r\n      note: {\r\n        id: Date.now().toString(),\r\n        title: 'New Note',\r\n        content: [initialContent],\r\n        sectionId: currentSectionId,\r\n        tags: [],\r\n        createdAt: new Date(),\r\n        updatedAt: new Date()\r\n      }\r\n    }));\r\n  };\r\n\r\n  const handleOpenFile = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const file = e.target.files?.[0];\r\n    if (!file) return;\r\n\r\n    // Add file size limit\r\n    if (file.size > 5 * 1024 * 1024) { // 5MB limit\r\n      console.error('File too large');\r\n      return;\r\n    }\r\n\r\n    // Add file type validation\r\n    if (!['text/plain', 'text/markdown'].includes(file.type)) {\r\n      console.error('Invalid file type');\r\n      return;\r\n    }\r\n\r\n    const reader = new FileReader();\r\n    reader.onload = async (e) => {\r\n      try {\r\n        const text = e.target?.result;\r\n        if (typeof text === 'string') {\r\n          const content = text.split('\\n').map(line => ({\r\n            type: 'paragraph',\r\n            children: [{ text: DOMPurify.sanitize(line) }]\r\n          } as ParagraphElement));\r\n\r\n          // Validate content structure\r\n          const validatedContent = noteContentSchema.parse(content);\r\n          \r\n          if (currentSectionId) {\r\n            dispatch(addNote({\r\n              sectionId: currentSectionId,\r\n              note: {\r\n                id: crypto.randomUUID(), // Use secure ID generation\r\n                title: DOMPurify.sanitize(file.name),\r\n                content: validatedContent,\r\n                sectionId: currentSectionId,\r\n                tags: [],\r\n                createdAt: new Date(),\r\n                updatedAt: new Date()\r\n              }\r\n            }));\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error('Error processing file:', error);\r\n      }\r\n    };\r\n    reader.readAsText(file);\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex gap-2\">\r\n      <button\r\n        onClick={handleNewFile}\r\n        className=\"px-3 py-1 text-sm bg-blue-500 text-white rounded hover:bg-blue-600\"\r\n      >\r\n        New File\r\n      </button>\r\n      <label className=\"px-3 py-1 text-sm bg-gray-500 text-white rounded hover:bg-gray-600 cursor-pointer\">\r\n        Open File\r\n        <input\r\n          type=\"file\"\r\n          accept=\".txt,.md\"\r\n          onChange={handleOpenFile}\r\n          className=\"hidden\"\r\n        />\r\n      </label>\r\n    </div>\r\n  );\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}