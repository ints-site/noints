{"ast":null,"code":"import { Text } from 'slate';\nexport function calculateNoteStats(nodes) {\n  let wordCount = 0;\n  let characterCount = 0;\n  let codeBlockCount = 0;\n  let tableCount = 0;\n  const traverseNode = node => {\n    if (Text.isText(node)) {\n      const text = node.text;\n      characterCount += text.length;\n      wordCount += text.trim().split(/\\s+/).filter(Boolean).length;\n    } else if ('type' in node) {\n      if (node.type === 'code-block') codeBlockCount++;\n      if (node.type === 'table') tableCount++;\n      if ('children' in node) {\n        node.children.forEach(traverseNode);\n      }\n    }\n  };\n  nodes.forEach(traverseNode);\n  const readingTime = Math.ceil(wordCount / 200);\n  return {\n    wordCount,\n    characterCount,\n    readingTime,\n    codeBlockCount,\n    tableCount,\n    lastModified: new Date()\n  };\n}","map":{"version":3,"names":["Text","calculateNoteStats","nodes","wordCount","characterCount","codeBlockCount","tableCount","traverseNode","node","isText","text","length","trim","split","filter","Boolean","type","children","forEach","readingTime","Math","ceil","lastModified","Date"],"sources":["C:/Users/FanYukin/codes/f/noints/client/src/utils/noteStats.ts"],"sourcesContent":["import { Node, Text, Descendant } from 'slate';\r\nimport { CustomElement, NoteStats } from '../components/Editor/types';\r\n\r\nexport function calculateNoteStats(nodes: Descendant[]): NoteStats {\r\n  let wordCount = 0;\r\n  let characterCount = 0;\r\n  let codeBlockCount = 0;\r\n  let tableCount = 0;\r\n\r\n  const traverseNode = (node: Descendant) => {\r\n    if (Text.isText(node)) {\r\n      const text = node.text;\r\n      characterCount += text.length;\r\n      wordCount += text.trim().split(/\\s+/).filter(Boolean).length;\r\n    } else if ('type' in node) {\r\n      if (node.type === 'code-block') codeBlockCount++;\r\n      if (node.type === 'table') tableCount++;\r\n      \r\n      if ('children' in node) {\r\n        node.children.forEach(traverseNode);\r\n      }\r\n    }\r\n  };\r\n\r\n  nodes.forEach(traverseNode);\r\n\r\n  const readingTime = Math.ceil(wordCount / 200);\r\n\r\n  return {\r\n    wordCount,\r\n    characterCount,\r\n    readingTime,\r\n    codeBlockCount,\r\n    tableCount,\r\n    lastModified: new Date()\r\n  };\r\n} "],"mappings":"AAAA,SAAeA,IAAI,QAAoB,OAAO;AAG9C,OAAO,SAASC,kBAAkBA,CAACC,KAAmB,EAAa;EACjE,IAAIC,SAAS,GAAG,CAAC;EACjB,IAAIC,cAAc,GAAG,CAAC;EACtB,IAAIC,cAAc,GAAG,CAAC;EACtB,IAAIC,UAAU,GAAG,CAAC;EAElB,MAAMC,YAAY,GAAIC,IAAgB,IAAK;IACzC,IAAIR,IAAI,CAACS,MAAM,CAACD,IAAI,CAAC,EAAE;MACrB,MAAME,IAAI,GAAGF,IAAI,CAACE,IAAI;MACtBN,cAAc,IAAIM,IAAI,CAACC,MAAM;MAC7BR,SAAS,IAAIO,IAAI,CAACE,IAAI,CAAC,CAAC,CAACC,KAAK,CAAC,KAAK,CAAC,CAACC,MAAM,CAACC,OAAO,CAAC,CAACJ,MAAM;IAC9D,CAAC,MAAM,IAAI,MAAM,IAAIH,IAAI,EAAE;MACzB,IAAIA,IAAI,CAACQ,IAAI,KAAK,YAAY,EAAEX,cAAc,EAAE;MAChD,IAAIG,IAAI,CAACQ,IAAI,KAAK,OAAO,EAAEV,UAAU,EAAE;MAEvC,IAAI,UAAU,IAAIE,IAAI,EAAE;QACtBA,IAAI,CAACS,QAAQ,CAACC,OAAO,CAACX,YAAY,CAAC;MACrC;IACF;EACF,CAAC;EAEDL,KAAK,CAACgB,OAAO,CAACX,YAAY,CAAC;EAE3B,MAAMY,WAAW,GAAGC,IAAI,CAACC,IAAI,CAAClB,SAAS,GAAG,GAAG,CAAC;EAE9C,OAAO;IACLA,SAAS;IACTC,cAAc;IACde,WAAW;IACXd,cAAc;IACdC,UAAU;IACVgB,YAAY,EAAE,IAAIC,IAAI,CAAC;EACzB,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}