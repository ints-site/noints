{"ast":null,"code":"import { Editor } from 'slate';\nexport function calculateNoteStats(nodes) {\n  let wordCount = 0;\n  let characterCount = 0;\n  let codeBlockCount = 0;\n  let tableCount = 0;\n  const countStats = node => {\n    if (Editor.isText(node)) {\n      const text = node.text || '';\n      characterCount += text.length;\n      wordCount += text.trim().split(/\\s+/).filter(Boolean).length;\n    }\n    if ('type' in node) {\n      if (node.type === 'code-block') codeBlockCount++;\n      if (node.type === 'table') tableCount++;\n    }\n  };\n  nodes.forEach(node => {\n    Editor.nodes(node, {\n      at: [],\n      match: () => true,\n      visit: countStats\n    });\n  });\n\n  // Estimate reading time (average reading speed: 200 words per minute)\n  const readingTime = Math.ceil(wordCount / 200);\n  return {\n    wordCount,\n    characterCount,\n    readingTime,\n    codeBlockCount,\n    tableCount,\n    lastModified: new Date()\n  };\n}","map":{"version":3,"names":["Editor","calculateNoteStats","nodes","wordCount","characterCount","codeBlockCount","tableCount","countStats","node","isText","text","length","trim","split","filter","Boolean","type","forEach","at","match","visit","readingTime","Math","ceil","lastModified","Date"],"sources":["C:/Users/FanYukin/codes/f/noints/client/src/utils/noteStats.ts"],"sourcesContent":["import { Editor, Node } from 'slate';\r\nimport { CustomElement, NoteStats } from '../components/Editor/types';\r\n\r\nexport function calculateNoteStats(nodes: CustomElement[]): NoteStats {\r\n  let wordCount = 0;\r\n  let characterCount = 0;\r\n  let codeBlockCount = 0;\r\n  let tableCount = 0;\r\n\r\n  const countStats = (node: Node) => {\r\n    if (Editor.isText(node)) {\r\n      const text = node.text || '';\r\n      characterCount += text.length;\r\n      wordCount += text.trim().split(/\\s+/).filter(Boolean).length;\r\n    }\r\n    \r\n    if ('type' in node) {\r\n      if (node.type === 'code-block') codeBlockCount++;\r\n      if (node.type === 'table') tableCount++;\r\n    }\r\n  };\r\n\r\n  nodes.forEach(node => {\r\n    Editor.nodes(node as any, {\r\n      at: [],\r\n      match: () => true,\r\n      visit: countStats\r\n    });\r\n  });\r\n\r\n  // Estimate reading time (average reading speed: 200 words per minute)\r\n  const readingTime = Math.ceil(wordCount / 200);\r\n\r\n  return {\r\n    wordCount,\r\n    characterCount,\r\n    readingTime,\r\n    codeBlockCount,\r\n    tableCount,\r\n    lastModified: new Date()\r\n  };\r\n} "],"mappings":"AAAA,SAASA,MAAM,QAAc,OAAO;AAGpC,OAAO,SAASC,kBAAkBA,CAACC,KAAsB,EAAa;EACpE,IAAIC,SAAS,GAAG,CAAC;EACjB,IAAIC,cAAc,GAAG,CAAC;EACtB,IAAIC,cAAc,GAAG,CAAC;EACtB,IAAIC,UAAU,GAAG,CAAC;EAElB,MAAMC,UAAU,GAAIC,IAAU,IAAK;IACjC,IAAIR,MAAM,CAACS,MAAM,CAACD,IAAI,CAAC,EAAE;MACvB,MAAME,IAAI,GAAGF,IAAI,CAACE,IAAI,IAAI,EAAE;MAC5BN,cAAc,IAAIM,IAAI,CAACC,MAAM;MAC7BR,SAAS,IAAIO,IAAI,CAACE,IAAI,CAAC,CAAC,CAACC,KAAK,CAAC,KAAK,CAAC,CAACC,MAAM,CAACC,OAAO,CAAC,CAACJ,MAAM;IAC9D;IAEA,IAAI,MAAM,IAAIH,IAAI,EAAE;MAClB,IAAIA,IAAI,CAACQ,IAAI,KAAK,YAAY,EAAEX,cAAc,EAAE;MAChD,IAAIG,IAAI,CAACQ,IAAI,KAAK,OAAO,EAAEV,UAAU,EAAE;IACzC;EACF,CAAC;EAEDJ,KAAK,CAACe,OAAO,CAACT,IAAI,IAAI;IACpBR,MAAM,CAACE,KAAK,CAACM,IAAI,EAAS;MACxBU,EAAE,EAAE,EAAE;MACNC,KAAK,EAAEA,CAAA,KAAM,IAAI;MACjBC,KAAK,EAAEb;IACT,CAAC,CAAC;EACJ,CAAC,CAAC;;EAEF;EACA,MAAMc,WAAW,GAAGC,IAAI,CAACC,IAAI,CAACpB,SAAS,GAAG,GAAG,CAAC;EAE9C,OAAO;IACLA,SAAS;IACTC,cAAc;IACdiB,WAAW;IACXhB,cAAc;IACdC,UAAU;IACVkB,YAAY,EAAE,IAAIC,IAAI,CAAC;EACzB,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}