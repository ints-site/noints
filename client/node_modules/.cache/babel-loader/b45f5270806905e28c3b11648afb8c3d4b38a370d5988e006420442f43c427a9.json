{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  items: [],\n  currentNotebook: null,\n  currentSection: null,\n  currentNote: null,\n  isLoading: false,\n  error: null\n};\nconst notebookSlice = createSlice({\n  name: 'notebooks',\n  initialState,\n  reducers: {\n    setNotebooks: (state, action) => {\n      state.items = action.payload;\n    },\n    addNotebook: {\n      reducer: (state, action) => {\n        if (!action.payload.id) {\n          state.error = 'Invalid notebook: missing ID';\n          return;\n        }\n        state.items.push(action.payload);\n      },\n      prepare: notebook => {\n        const newNotebook = {\n          id: notebook.id || `notebook-${Date.now()}`,\n          title: notebook.title || 'Untitled Notebook',\n          sections: notebook.sections || [],\n          createdAt: new Date(),\n          updatedAt: new Date()\n        };\n        return {\n          payload: newNotebook\n        };\n      }\n    },\n    setCurrentNotebook: (state, action) => {\n      state.currentNotebook = action.payload;\n    },\n    setCurrentSection: (state, action) => {\n      state.currentSection = action.payload;\n    },\n    setCurrentNote: (state, action) => {\n      state.currentNote = action.payload;\n    },\n    updateNoteContent: (state, action) => {\n      const {\n        id,\n        content\n      } = action.payload;\n      state.items.forEach(notebook => {\n        notebook.sections.forEach(section => {\n          const note = section.notes.find(n => n.id === id);\n          if (note) {\n            note.content = content;\n            note.updatedAt = new Date();\n          }\n        });\n      });\n    },\n    addSection: (state, action) => {\n      const {\n        notebookId,\n        section\n      } = action.payload;\n      const notebook = state.items.find(nb => nb.id === notebookId);\n      if (notebook) {\n        notebook.sections.push(section);\n      }\n    },\n    addNote: (state, action) => {\n      const {\n        sectionId,\n        note\n      } = action.payload;\n      state.items.forEach(notebook => {\n        const section = notebook.sections.find(s => s.id === sectionId);\n        if (section) {\n          section.notes.push(note);\n        }\n      });\n    },\n    updateSectionTitle: (state, action) => {\n      const {\n        sectionId,\n        title\n      } = action.payload;\n      state.items.forEach(notebook => {\n        const section = notebook.sections.find(s => s.id === sectionId);\n        if (section) {\n          section.title = title;\n        }\n      });\n    },\n    updateNoteTitle: (state, action) => {\n      const {\n        noteId,\n        title\n      } = action.payload;\n      state.items.forEach(notebook => {\n        notebook.sections.forEach(section => {\n          const note = section.notes.find(n => n.id === noteId);\n          if (note) {\n            note.title = title;\n          }\n        });\n      });\n    },\n    deleteSection: (state, action) => {\n      var _state$currentSection;\n      const {\n        notebookId,\n        sectionId\n      } = action.payload;\n      const notebook = state.items.find(nb => nb.id === notebookId);\n      if (notebook) {\n        notebook.sections = notebook.sections.filter(s => s.id !== sectionId);\n      }\n      if (((_state$currentSection = state.currentSection) === null || _state$currentSection === void 0 ? void 0 : _state$currentSection.id) === sectionId) {\n        state.currentSection = null;\n        state.currentNote = null;\n      }\n    },\n    deleteNote: (state, action) => {\n      var _state$currentNote;\n      const {\n        noteId\n      } = action.payload;\n      state.items.forEach(notebook => {\n        notebook.sections.forEach(section => {\n          section.notes = section.notes.filter(n => n.id !== noteId);\n        });\n      });\n      if (((_state$currentNote = state.currentNote) === null || _state$currentNote === void 0 ? void 0 : _state$currentNote.id) === noteId) {\n        state.currentNote = null;\n      }\n    },\n    reorderSections: (state, action) => {\n      const {\n        notebookId,\n        startIndex,\n        endIndex\n      } = action.payload;\n      const notebook = state.items.find(nb => nb.id === notebookId);\n      if (notebook) {\n        const [removed] = notebook.sections.splice(startIndex, 1);\n        notebook.sections.splice(endIndex, 0, removed);\n      }\n    },\n    reorderNotes: (state, action) => {\n      const {\n        sectionId,\n        startIndex,\n        endIndex\n      } = action.payload;\n      state.items.forEach(notebook => {\n        const section = notebook.sections.find(s => s.id === sectionId);\n        if (section) {\n          const [removed] = section.notes.splice(startIndex, 1);\n          section.notes.splice(endIndex, 0, removed);\n        }\n      });\n    }\n  }\n});\nexport const {\n  setNotebooks,\n  addNotebook,\n  setCurrentNotebook,\n  setCurrentSection,\n  setCurrentNote,\n  updateNoteContent,\n  addSection,\n  addNote,\n  updateSectionTitle,\n  updateNoteTitle,\n  deleteSection,\n  deleteNote,\n  reorderSections,\n  reorderNotes\n} = notebookSlice.actions;\nexport default notebookSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","items","currentNotebook","currentSection","currentNote","isLoading","error","notebookSlice","name","reducers","setNotebooks","state","action","payload","addNotebook","reducer","id","push","prepare","notebook","newNotebook","Date","now","title","sections","createdAt","updatedAt","setCurrentNotebook","setCurrentSection","setCurrentNote","updateNoteContent","content","forEach","section","note","notes","find","n","addSection","notebookId","nb","addNote","sectionId","s","updateSectionTitle","updateNoteTitle","noteId","deleteSection","_state$currentSection","filter","deleteNote","_state$currentNote","reorderSections","startIndex","endIndex","removed","splice","reorderNotes","actions"],"sources":["C:/Users/FanYukin/codes/f/noints/client/src/store/notebookSlice.ts"],"sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { Descendant } from 'slate';\nimport { Notebook, Section, Note } from '@shared/types';\n\ninterface NotebookState {\n  items: Notebook[];\n  currentNotebook: Notebook | null;\n  currentSection: Section | null;\n  currentNote: Note | null;\n  isLoading: boolean;\n  error: string | null;\n}\n\nconst initialState: NotebookState = {\n  items: [],\n  currentNotebook: null,\n  currentSection: null,\n  currentNote: null,\n  isLoading: false,\n  error: null\n};\n\nconst notebookSlice = createSlice({\n  name: 'notebooks',\n  initialState,\n  reducers: {\n    setNotebooks: (state, action: PayloadAction<Notebook[]>) => {\n      state.items = action.payload;\n    },\n    addNotebook: {\n      reducer: (state, action: PayloadAction<Notebook>) => {\n        if (!action.payload.id) {\n          state.error = 'Invalid notebook: missing ID';\n          return;\n        }\n        state.items.push(action.payload);\n      },\n      prepare: (notebook: Partial<Notebook>) => {\n        const newNotebook: Notebook = {\n          id: notebook.id || `notebook-${Date.now()}`,\n          title: notebook.title || 'Untitled Notebook',\n          sections: notebook.sections || [],\n          createdAt: new Date(),\n          updatedAt: new Date()\n        };\n        return { payload: newNotebook };\n      }\n    },\n    setCurrentNotebook: (state, action: PayloadAction<Notebook>) => {\n      state.currentNotebook = action.payload;\n    },\n    setCurrentSection: (state, action: PayloadAction<Section>) => {\n      state.currentSection = action.payload;\n    },\n    setCurrentNote: (state, action: PayloadAction<Note>) => {\n      state.currentNote = action.payload;\n    },\n    updateNoteContent: (\n      state,\n      action: PayloadAction<{ id: string; content: Descendant[] }>\n    ) => {\n      const { id, content } = action.payload;\n      state.items.forEach(notebook => {\n        notebook.sections.forEach((section: Section) => {\n          const note = section.notes.find((n: Note) => n.id === id);\n          if (note) {\n            note.content = content;\n            note.updatedAt = new Date();\n          }\n        });\n      });\n    },\n    addSection: (state, action: PayloadAction<{ notebookId: string; section: Section }>) => {\n      const { notebookId, section } = action.payload;\n      const notebook = state.items.find(nb => nb.id === notebookId);\n      if (notebook) {\n        notebook.sections.push(section);\n      }\n    },\n    addNote: (state, action: PayloadAction<{ sectionId: string; note: Note }>) => {\n      const { sectionId, note } = action.payload;\n      state.items.forEach(notebook => {\n        const section = notebook.sections.find(s => s.id === sectionId);\n        if (section) {\n          section.notes.push(note);\n        }\n      });\n    },\n    updateSectionTitle: (state, action: PayloadAction<{ sectionId: string; title: string }>) => {\n      const { sectionId, title } = action.payload;\n      state.items.forEach(notebook => {\n        const section = notebook.sections.find(s => s.id === sectionId);\n        if (section) {\n          section.title = title;\n        }\n      });\n    },\n    updateNoteTitle: (state, action: PayloadAction<{ noteId: string; title: string }>) => {\n      const { noteId, title } = action.payload;\n      state.items.forEach(notebook => {\n        notebook.sections.forEach((section: Section) => {\n          const note = section.notes.find((n: Note) => n.id === noteId);\n          if (note) {\n            note.title = title;\n          }\n        });\n      });\n    },\n    deleteSection: (state, action: PayloadAction<{ notebookId: string; sectionId: string }>) => {\n      const { notebookId, sectionId } = action.payload;\n      const notebook = state.items.find(nb => nb.id === notebookId);\n      if (notebook) {\n        notebook.sections = notebook.sections.filter(s => s.id !== sectionId);\n      }\n      if (state.currentSection?.id === sectionId) {\n        state.currentSection = null;\n        state.currentNote = null;\n      }\n    },\n    deleteNote: (state, action: PayloadAction<{ noteId: string }>) => {\n      const { noteId } = action.payload;\n      state.items.forEach(notebook => {\n        notebook.sections.forEach((section: Section) => {\n          section.notes = section.notes.filter(n => n.id !== noteId);\n        });\n      });\n      if (state.currentNote?.id === noteId) {\n        state.currentNote = null;\n      }\n    },\n    reorderSections: (state, action: PayloadAction<{\n      notebookId: string;\n      startIndex: number;\n      endIndex: number;\n    }>) => {\n      const { notebookId, startIndex, endIndex } = action.payload;\n      const notebook = state.items.find(nb => nb.id === notebookId);\n      if (notebook) {\n        const [removed] = notebook.sections.splice(startIndex, 1);\n        notebook.sections.splice(endIndex, 0, removed);\n      }\n    },\n    reorderNotes: (state, action: PayloadAction<{\n      sectionId: string;\n      startIndex: number;\n      endIndex: number;\n    }>) => {\n      const { sectionId, startIndex, endIndex } = action.payload;\n      state.items.forEach(notebook => {\n        const section = notebook.sections.find(s => s.id === sectionId);\n        if (section) {\n          const [removed] = section.notes.splice(startIndex, 1);\n          section.notes.splice(endIndex, 0, removed);\n        }\n      });\n    },\n  }\n});\n\nexport const { \n  setNotebooks, \n  addNotebook,\n  setCurrentNotebook,\n  setCurrentSection,\n  setCurrentNote,\n  updateNoteContent,\n  addSection,\n  addNote,\n  updateSectionTitle,\n  updateNoteTitle,\n  deleteSection,\n  deleteNote,\n  reorderSections,\n  reorderNotes\n} = notebookSlice.actions;\n\nexport default notebookSlice.reducer; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}