{"ast":null,"code":"import { Editor, Transforms, Text } from 'slate';\nexport const findAndReplace = (editor, searchText, replaceText) => {\n  if (!searchText) return;\n  const matches = Editor.nodes(editor, {\n    match: node => Text.isText(node) && node.text.toLowerCase().includes(searchText.toLowerCase())\n  });\n  for (const [node, path] of matches) {\n    if (Text.isText(node)) {\n      const {\n        text\n      } = node;\n      const parts = text.split(new RegExp(`(${searchText})`, 'gi'));\n      const newTexts = parts.map(part => part.toLowerCase() === searchText.toLowerCase() ? replaceText : part);\n      Transforms.delete(editor, {\n        at: path\n      });\n      Transforms.insertText(editor, newTexts.join(''), {\n        at: path\n      });\n    }\n  }\n};","map":{"version":3,"names":["Editor","Transforms","Text","findAndReplace","editor","searchText","replaceText","matches","nodes","match","node","isText","text","toLowerCase","includes","path","parts","split","RegExp","newTexts","map","part","delete","at","insertText","join"],"sources":["C:/Users/FanYukin/codes/f/noints/client/src/utils/textOperations.ts"],"sourcesContent":["import { Editor, Transforms, Text } from 'slate';\r\nimport { CustomEditor } from '../components/Editor/types';\r\n\r\nexport const findAndReplace = (\r\n  editor: CustomEditor,\r\n  searchText: string,\r\n  replaceText: string\r\n) => {\r\n  if (!searchText) return;\r\n\r\n  const matches = Editor.nodes(editor, {\r\n    match: (node) => \r\n      Text.isText(node) && \r\n      node.text.toLowerCase().includes(searchText.toLowerCase()),\r\n  });\r\n\r\n  for (const [node, path] of matches) {\r\n    if (Text.isText(node)) {\r\n      const { text } = node;\r\n      const parts = text.split(new RegExp(`(${searchText})`, 'gi'));\r\n      const newTexts = parts.map(part => \r\n        part.toLowerCase() === searchText.toLowerCase()\r\n          ? replaceText\r\n          : part\r\n      );\r\n      \r\n      Transforms.delete(editor, { at: path });\r\n      Transforms.insertText(editor, newTexts.join(''), { at: path });\r\n    }\r\n  }\r\n}; "],"mappings":"AAAA,SAASA,MAAM,EAAEC,UAAU,EAAEC,IAAI,QAAQ,OAAO;AAGhD,OAAO,MAAMC,cAAc,GAAGA,CAC5BC,MAAoB,EACpBC,UAAkB,EAClBC,WAAmB,KAChB;EACH,IAAI,CAACD,UAAU,EAAE;EAEjB,MAAME,OAAO,GAAGP,MAAM,CAACQ,KAAK,CAACJ,MAAM,EAAE;IACnCK,KAAK,EAAGC,IAAI,IACVR,IAAI,CAACS,MAAM,CAACD,IAAI,CAAC,IACjBA,IAAI,CAACE,IAAI,CAACC,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACT,UAAU,CAACQ,WAAW,CAAC,CAAC;EAC7D,CAAC,CAAC;EAEF,KAAK,MAAM,CAACH,IAAI,EAAEK,IAAI,CAAC,IAAIR,OAAO,EAAE;IAClC,IAAIL,IAAI,CAACS,MAAM,CAACD,IAAI,CAAC,EAAE;MACrB,MAAM;QAAEE;MAAK,CAAC,GAAGF,IAAI;MACrB,MAAMM,KAAK,GAAGJ,IAAI,CAACK,KAAK,CAAC,IAAIC,MAAM,CAAC,IAAIb,UAAU,GAAG,EAAE,IAAI,CAAC,CAAC;MAC7D,MAAMc,QAAQ,GAAGH,KAAK,CAACI,GAAG,CAACC,IAAI,IAC7BA,IAAI,CAACR,WAAW,CAAC,CAAC,KAAKR,UAAU,CAACQ,WAAW,CAAC,CAAC,GAC3CP,WAAW,GACXe,IACN,CAAC;MAEDpB,UAAU,CAACqB,MAAM,CAAClB,MAAM,EAAE;QAAEmB,EAAE,EAAER;MAAK,CAAC,CAAC;MACvCd,UAAU,CAACuB,UAAU,CAACpB,MAAM,EAAEe,QAAQ,CAACM,IAAI,CAAC,EAAE,CAAC,EAAE;QAAEF,EAAE,EAAER;MAAK,CAAC,CAAC;IAChE;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}