{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  items: [],\n  currentNotebook: null,\n  currentSection: null,\n  currentNote: null\n};\n\n// Add validation helper\nconst validateNote = note => {\n  return typeof note === 'object' && typeof note.id === 'string' && typeof note.title === 'string' && Array.isArray(note.content) && typeof note.sectionId === 'string';\n};\nconst notebookSlice = createSlice({\n  name: 'notebooks',\n  initialState,\n  reducers: {\n    addNotebook: (state, action) => {\n      state.items.push(action.payload);\n    },\n    addSection: (state, action) => {\n      const {\n        notebookId,\n        section\n      } = action.payload;\n      const notebook = state.items.find(nb => nb.id === notebookId);\n      if (notebook) {\n        notebook.sections.push(section);\n      }\n    },\n    setCurrentNotebook: (state, action) => {\n      state.currentNotebook = action.payload;\n    },\n    setCurrentSection: (state, action) => {\n      state.currentSection = action.payload;\n    },\n    setCurrentNote: (state, action) => {\n      state.currentNote = action.payload;\n    },\n    updateNoteContent: (state, action) => {\n      const {\n        id,\n        content\n      } = action.payload;\n      if (!Array.isArray(content)) {\n        console.error('Invalid content format');\n        return;\n      }\n      state.items.forEach(notebook => {\n        notebook.sections.forEach(section => {\n          const note = section.notes.find(n => n.id === id);\n          if (note && validateNote(note)) {\n            note.content = content;\n            note.updatedAt = new Date();\n          }\n        });\n      });\n    },\n    updateSectionTitle: (state, action) => {\n      const {\n        sectionId,\n        title\n      } = action.payload;\n      state.items.forEach(notebook => {\n        const section = notebook.sections.find(s => s.id === sectionId);\n        if (section) {\n          section.title = title;\n        }\n      });\n    },\n    updateNoteTitle: (state, action) => {\n      const {\n        noteId,\n        title\n      } = action.payload;\n      state.items.forEach(notebook => {\n        notebook.sections.forEach(section => {\n          const note = section.notes.find(n => n.id === noteId);\n          if (note) {\n            note.title = title;\n          }\n        });\n      });\n    },\n    deleteSection: (state, action) => {\n      const {\n        notebookId,\n        sectionId\n      } = action.payload;\n      const notebook = state.items.find(nb => nb.id === notebookId);\n      if (notebook) {\n        notebook.sections = notebook.sections.filter(s => s.id !== sectionId);\n      }\n    },\n    deleteNote: (state, action) => {\n      const {\n        sectionId,\n        noteId\n      } = action.payload;\n      state.items.forEach(notebook => {\n        const section = notebook.sections.find(s => s.id === sectionId);\n        if (section) {\n          section.notes = section.notes.filter(n => n.id !== noteId);\n        }\n      });\n    },\n    reorderSections: (state, action) => {\n      const {\n        notebookId,\n        sections\n      } = action.payload;\n      const notebook = state.items.find(nb => nb.id === notebookId);\n      if (notebook) {\n        notebook.sections = sections;\n      }\n    },\n    reorderNotes: (state, action) => {\n      const {\n        sectionId,\n        notes\n      } = action.payload;\n      state.items.forEach(notebook => {\n        const section = notebook.sections.find(s => s.id === sectionId);\n        if (section) {\n          section.notes = notes;\n        }\n      });\n    },\n    addNote: (state, action) => {\n      const {\n        sectionId,\n        note\n      } = action.payload;\n      state.items.forEach(notebook => {\n        const section = notebook.sections.find(s => s.id === sectionId);\n        if (section) {\n          section.notes.push(note);\n        }\n      });\n    }\n  }\n});\nexport const {\n  addNotebook,\n  addSection,\n  setCurrentNotebook,\n  setCurrentSection,\n  setCurrentNote,\n  updateNoteContent,\n  updateSectionTitle,\n  updateNoteTitle,\n  deleteSection,\n  deleteNote,\n  reorderSections,\n  reorderNotes,\n  addNote\n} = notebookSlice.actions;\nexport default notebookSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","items","currentNotebook","currentSection","currentNote","validateNote","note","id","title","Array","isArray","content","sectionId","notebookSlice","name","reducers","addNotebook","state","action","push","payload","addSection","notebookId","section","notebook","find","nb","sections","setCurrentNotebook","setCurrentSection","setCurrentNote","updateNoteContent","console","error","forEach","notes","n","updatedAt","Date","updateSectionTitle","s","updateNoteTitle","noteId","deleteSection","filter","deleteNote","reorderSections","reorderNotes","addNote","actions","reducer"],"sources":["C:/Users/FanYukin/codes/f/noints/client/src/store/notebookSlice.ts"],"sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { Notebook, Section, Note } from '../types';\nimport { Descendant } from 'slate';\n\ninterface NotebookState {\n  items: Notebook[];\n  currentNotebook: Notebook | null;\n  currentSection: Section | null;\n  currentNote: Note | null;\n}\n\nconst initialState: NotebookState = {\n  items: [],\n  currentNotebook: null,\n  currentSection: null,\n  currentNote: null,\n};\n\n// Add validation helper\nconst validateNote = (note: any): note is Note => {\n  return (\n    typeof note === 'object' &&\n    typeof note.id === 'string' &&\n    typeof note.title === 'string' &&\n    Array.isArray(note.content) &&\n    typeof note.sectionId === 'string'\n  );\n};\n\nconst notebookSlice = createSlice({\n  name: 'notebooks',\n  initialState,\n  reducers: {\n    addNotebook: (state, action: PayloadAction<Notebook>) => {\n      state.items.push(action.payload);\n    },\n    addSection: (state, action: PayloadAction<{ notebookId: string; section: Section }>) => {\n      const { notebookId, section } = action.payload;\n      const notebook = state.items.find(nb => nb.id === notebookId);\n      if (notebook) {\n        notebook.sections.push(section);\n      }\n    },\n    setCurrentNotebook: (state, action: PayloadAction<Notebook>) => {\n      state.currentNotebook = action.payload;\n    },\n    setCurrentSection: (state, action: PayloadAction<Section>) => {\n      state.currentSection = action.payload;\n    },\n    setCurrentNote: (state, action: PayloadAction<Note>) => {\n      state.currentNote = action.payload;\n    },\n    updateNoteContent: (\n      state,\n      action: PayloadAction<{ id: string; content: Descendant[] }>\n    ) => {\n      const { id, content } = action.payload;\n      \n      if (!Array.isArray(content)) {\n        console.error('Invalid content format');\n        return;\n      }\n\n      state.items.forEach((notebook: Notebook) => {\n        notebook.sections.forEach((section: Section) => {\n          const note = section.notes.find((n: Note) => n.id === id);\n          if (note && validateNote(note)) {\n            note.content = content;\n            note.updatedAt = new Date();\n          }\n        });\n      });\n    },\n    updateSectionTitle: (\n      state,\n      action: PayloadAction<{ sectionId: string; title: string }>\n    ) => {\n      const { sectionId, title } = action.payload;\n      state.items.forEach((notebook: Notebook) => {\n        const section = notebook.sections.find((s: Section) => s.id === sectionId);\n        if (section) {\n          section.title = title;\n        }\n      });\n    },\n    updateNoteTitle: (\n      state,\n      action: PayloadAction<{ noteId: string; title: string }>\n    ) => {\n      const { noteId, title } = action.payload;\n      state.items.forEach((notebook: Notebook) => {\n        notebook.sections.forEach((section: Section) => {\n          const note = section.notes.find((n: Note) => n.id === noteId);\n          if (note) {\n            note.title = title;\n          }\n        });\n      });\n    },\n    deleteSection: (\n      state,\n      action: PayloadAction<{ notebookId: string; sectionId: string }>\n    ) => {\n      const { notebookId, sectionId } = action.payload;\n      const notebook = state.items.find(nb => nb.id === notebookId);\n      if (notebook) {\n        notebook.sections = notebook.sections.filter(s => s.id !== sectionId);\n      }\n    },\n    deleteNote: (\n      state,\n      action: PayloadAction<{ sectionId: string; noteId: string }>\n    ) => {\n      const { sectionId, noteId } = action.payload;\n      state.items.forEach((notebook: Notebook) => {\n        const section = notebook.sections.find(s => s.id === sectionId);\n        if (section) {\n          section.notes = section.notes.filter(n => n.id !== noteId);\n        }\n      });\n    },\n    reorderSections: (\n      state,\n      action: PayloadAction<{ notebookId: string; sections: Section[] }>\n    ) => {\n      const { notebookId, sections } = action.payload;\n      const notebook = state.items.find(nb => nb.id === notebookId);\n      if (notebook) {\n        notebook.sections = sections;\n      }\n    },\n    reorderNotes: (\n      state,\n      action: PayloadAction<{ sectionId: string; notes: Note[] }>\n    ) => {\n      const { sectionId, notes } = action.payload;\n      state.items.forEach((notebook: Notebook) => {\n        const section = notebook.sections.find(s => s.id === sectionId);\n        if (section) {\n          section.notes = notes;\n        }\n      });\n    },\n    addNote: (\n      state,\n      action: PayloadAction<{ sectionId: string; note: Note }>\n    ) => {\n      const { sectionId, note } = action.payload;\n      state.items.forEach((notebook: Notebook) => {\n        const section = notebook.sections.find((s: Section) => s.id === sectionId);\n        if (section) {\n          section.notes.push(note);\n        }\n      });\n    },\n  },\n});\n\nexport const {\n  addNotebook,\n  addSection,\n  setCurrentNotebook,\n  setCurrentSection,\n  setCurrentNote,\n  updateNoteContent,\n  updateSectionTitle,\n  updateNoteTitle,\n  deleteSection,\n  deleteNote,\n  reorderSections,\n  reorderNotes,\n  addNote,\n} = notebookSlice.actions;\n\nexport default notebookSlice.reducer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}