{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\FanYukin\\\\codes\\\\f\\\\noints\\\\client\\\\src\\\\components\\\\Editor\\\\FileOperations.tsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { addNote } from '../../store/notebookSlice';\nimport { z } from 'zod';\nimport DOMPurify from 'dompurify';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Add validation schema\nconst noteContentSchema = z.array(z.object({\n  type: z.string(),\n  children: z.array(z.object({\n    text: z.string()\n  }))\n}));\nexport const FileOperations = ({\n  editor,\n  currentSectionId\n}) => {\n  _s();\n  const dispatch = useDispatch();\n  const handleNewFile = () => {\n    if (!currentSectionId) {\n      console.error('No section selected');\n      return;\n    }\n    try {\n      const initialContent = {\n        type: 'paragraph',\n        children: [{\n          text: ''\n        }]\n      };\n      dispatch(addNote({\n        sectionId: currentSectionId,\n        note: {\n          id: crypto.randomUUID(),\n          title: 'New Note',\n          content: [initialContent],\n          sectionId: currentSectionId,\n          tags: [],\n          createdAt: new Date(),\n          updatedAt: new Date()\n        }\n      }));\n    } catch (error) {\n      console.error('Error creating new file:', error);\n    }\n  };\n  const handleOpenFile = async e => {\n    try {\n      var _e$target$files;\n      const file = (_e$target$files = e.target.files) === null || _e$target$files === void 0 ? void 0 : _e$target$files[0];\n      if (!file || !currentSectionId) return;\n      if (file.size > 5 * 1024 * 1024) {\n        alert('File too large (max 5MB)');\n        return;\n      }\n      if (!['text/plain', 'text/markdown'].includes(file.type)) {\n        alert('Invalid file type (only .txt and .md supported)');\n        return;\n      }\n      const text = await file.text();\n      const sanitizedText = DOMPurify.sanitize(text);\n      const content = sanitizedText.split('\\n').map(line => ({\n        type: 'paragraph',\n        children: [{\n          text: line\n        }]\n      }));\n      dispatch(addNote({\n        sectionId: currentSectionId,\n        note: {\n          id: crypto.randomUUID(),\n          title: DOMPurify.sanitize(file.name),\n          content,\n          sectionId: currentSectionId,\n          tags: [],\n          createdAt: new Date(),\n          updatedAt: new Date()\n        }\n      }));\n    } catch (error) {\n      console.error('Error opening file:', error);\n      alert('Failed to open file');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex gap-2\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleNewFile,\n      className: \"px-3 py-1 text-sm bg-blue-500 text-white rounded hover:bg-blue-600\",\n      children: \"New File\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      className: \"px-3 py-1 text-sm bg-gray-500 text-white rounded hover:bg-gray-600 cursor-pointer\",\n      children: [\"Open File\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        accept: \".txt,.md\",\n        onChange: handleOpenFile,\n        className: \"hidden\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 5\n  }, this);\n};\n_s(FileOperations, \"rgTLoBID190wEKCp9+G8W6F7A5M=\", false, function () {\n  return [useDispatch];\n});\n_c = FileOperations;\nvar _c;\n$RefreshReg$(_c, \"FileOperations\");","map":{"version":3,"names":["React","useDispatch","addNote","z","DOMPurify","jsxDEV","_jsxDEV","noteContentSchema","array","object","type","string","children","text","FileOperations","editor","currentSectionId","_s","dispatch","handleNewFile","console","error","initialContent","sectionId","note","id","crypto","randomUUID","title","content","tags","createdAt","Date","updatedAt","handleOpenFile","e","_e$target$files","file","target","files","size","alert","includes","sanitizedText","sanitize","split","map","line","name","className","onClick","fileName","_jsxFileName","lineNumber","columnNumber","accept","onChange","_c","$RefreshReg$"],"sources":["C:/Users/FanYukin/codes/f/noints/client/src/components/Editor/FileOperations.tsx"],"sourcesContent":["import React from 'react';\r\nimport { Node } from 'slate';\r\nimport { useDispatch } from 'react-redux';\r\nimport { addNote } from '../../store/notebookSlice';\r\nimport { \r\n  CustomEditor, \r\n  BlockFormatType, \r\n  CustomElement,\r\n  ParagraphElement \r\n} from './types';\r\nimport { z } from 'zod';\r\nimport DOMPurify from 'dompurify';\r\n\r\ninterface FileOperationsProps {\r\n  editor: CustomEditor;\r\n  currentSectionId?: string;\r\n}\r\n\r\n// Add validation schema\r\nconst noteContentSchema = z.array(z.object({\r\n  type: z.string(),\r\n  children: z.array(z.object({\r\n    text: z.string()\r\n  }))\r\n}));\r\n\r\nexport const FileOperations: React.FC<FileOperationsProps> = ({ \r\n  editor, \r\n  currentSectionId \r\n}) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const handleNewFile = () => {\r\n    if (!currentSectionId) {\r\n      console.error('No section selected');\r\n      return;\r\n    }\r\n    \r\n    try {\r\n      const initialContent: ParagraphElement = {\r\n        type: 'paragraph',\r\n        children: [{ text: '' }]\r\n      };\r\n\r\n      dispatch(addNote({\r\n        sectionId: currentSectionId,\r\n        note: {\r\n          id: crypto.randomUUID(),\r\n          title: 'New Note',\r\n          content: [initialContent],\r\n          sectionId: currentSectionId,\r\n          tags: [],\r\n          createdAt: new Date(),\r\n          updatedAt: new Date()\r\n        }\r\n      }));\r\n    } catch (error) {\r\n      console.error('Error creating new file:', error);\r\n    }\r\n  };\r\n\r\n  const handleOpenFile = async (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    try {\r\n      const file = e.target.files?.[0];\r\n      if (!file || !currentSectionId) return;\r\n\r\n      if (file.size > 5 * 1024 * 1024) {\r\n        alert('File too large (max 5MB)');\r\n        return;\r\n      }\r\n\r\n      if (!['text/plain', 'text/markdown'].includes(file.type)) {\r\n        alert('Invalid file type (only .txt and .md supported)');\r\n        return;\r\n      }\r\n\r\n      const text = await file.text();\r\n      const sanitizedText = DOMPurify.sanitize(text);\r\n      const content = sanitizedText.split('\\n').map(line => ({\r\n        type: 'paragraph',\r\n        children: [{ text: line }]\r\n      }));\r\n\r\n      dispatch(addNote({\r\n        sectionId: currentSectionId,\r\n        note: {\r\n          id: crypto.randomUUID(),\r\n          title: DOMPurify.sanitize(file.name),\r\n          content,\r\n          sectionId: currentSectionId,\r\n          tags: [],\r\n          createdAt: new Date(),\r\n          updatedAt: new Date()\r\n        }\r\n      }));\r\n    } catch (error) {\r\n      console.error('Error opening file:', error);\r\n      alert('Failed to open file');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex gap-2\">\r\n      <button\r\n        onClick={handleNewFile}\r\n        className=\"px-3 py-1 text-sm bg-blue-500 text-white rounded hover:bg-blue-600\"\r\n      >\r\n        New File\r\n      </button>\r\n      <label className=\"px-3 py-1 text-sm bg-gray-500 text-white rounded hover:bg-gray-600 cursor-pointer\">\r\n        Open File\r\n        <input\r\n          type=\"file\"\r\n          accept=\".txt,.md\"\r\n          onChange={handleOpenFile}\r\n          className=\"hidden\"\r\n        />\r\n      </label>\r\n    </div>\r\n  );\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}