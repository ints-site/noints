{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  items: [],\n  currentNotebook: null,\n  currentSection: null,\n  currentNote: null\n};\nconst notebookSlice = createSlice({\n  name: 'notebooks',\n  initialState,\n  reducers: {\n    addNotebook: (state, action) => {\n      state.items.push(action.payload);\n    },\n    addSection: (state, action) => {\n      const {\n        notebookId,\n        section\n      } = action.payload;\n      const notebook = state.items.find(nb => nb.id === notebookId);\n      if (notebook) {\n        notebook.sections.push(section);\n      }\n    },\n    setCurrentNotebook: (state, action) => {\n      state.currentNotebook = action.payload;\n    },\n    setCurrentSection: (state, action) => {\n      state.currentSection = action.payload;\n    },\n    setCurrentNote: (state, action) => {\n      state.currentNote = action.payload;\n    },\n    updateNoteContent: (state, action) => {\n      const {\n        id,\n        content\n      } = action.payload;\n      state.items.forEach(notebook => {\n        notebook.sections.forEach(section => {\n          const note = section.notes.find(n => n.id === id);\n          if (note) {\n            note.content = content;\n            note.updatedAt = new Date();\n          }\n        });\n      });\n    },\n    updateSectionTitle: (state, action) => {\n      const {\n        sectionId,\n        title\n      } = action.payload;\n      state.items.forEach(notebook => {\n        const section = notebook.sections.find(s => s.id === sectionId);\n        if (section) {\n          section.title = title;\n        }\n      });\n    },\n    updateNoteTitle: (state, action) => {\n      const {\n        noteId,\n        title\n      } = action.payload;\n      state.items.forEach(notebook => {\n        notebook.sections.forEach(section => {\n          const note = section.notes.find(n => n.id === noteId);\n          if (note) {\n            note.title = title;\n          }\n        });\n      });\n    },\n    deleteSection: (state, action) => {\n      const {\n        notebookId,\n        sectionId\n      } = action.payload;\n      const notebook = state.items.find(nb => nb.id === notebookId);\n      if (notebook) {\n        notebook.sections = notebook.sections.filter(s => s.id !== sectionId);\n      }\n    },\n    deleteNote: (state, action) => {\n      const {\n        sectionId,\n        noteId\n      } = action.payload;\n      state.items.forEach(notebook => {\n        const section = notebook.sections.find(s => s.id === sectionId);\n        if (section) {\n          section.notes = section.notes.filter(n => n.id !== noteId);\n        }\n      });\n    },\n    reorderSections: (state, action) => {\n      const {\n        notebookId,\n        sections\n      } = action.payload;\n      const notebook = state.items.find(nb => nb.id === notebookId);\n      if (notebook) {\n        notebook.sections = sections;\n      }\n    },\n    reorderNotes: (state, action) => {\n      const {\n        sectionId,\n        notes\n      } = action.payload;\n      state.items.forEach(notebook => {\n        const section = notebook.sections.find(s => s.id === sectionId);\n        if (section) {\n          section.notes = notes;\n        }\n      });\n    },\n    addNote: (state, action) => {\n      const {\n        sectionId,\n        note\n      } = action.payload;\n      state.items.forEach(notebook => {\n        const section = notebook.sections.find(s => s.id === sectionId);\n        if (section) {\n          section.notes.push(note);\n        }\n      });\n    }\n  }\n});\nexport const {\n  addNotebook,\n  addSection,\n  setCurrentNotebook,\n  setCurrentSection,\n  setCurrentNote,\n  updateNoteContent,\n  updateSectionTitle,\n  updateNoteTitle,\n  deleteSection,\n  deleteNote,\n  reorderSections,\n  reorderNotes,\n  addNote\n} = notebookSlice.actions;\nexport default notebookSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","items","currentNotebook","currentSection","currentNote","notebookSlice","name","reducers","addNotebook","state","action","push","payload","addSection","notebookId","section","notebook","find","nb","id","sections","setCurrentNotebook","setCurrentSection","setCurrentNote","updateNoteContent","content","forEach","note","notes","n","updatedAt","Date","updateSectionTitle","sectionId","title","s","updateNoteTitle","noteId","deleteSection","filter","deleteNote","reorderSections","reorderNotes","addNote","actions","reducer"],"sources":["C:/Users/FanYukin/codes/f/noints/client/src/store/notebookSlice.ts"],"sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { Notebook, Section, Note } from '../types';\nimport { Descendant } from 'slate';\n\ninterface NotebookState {\n  items: Notebook[];\n  currentNotebook: Notebook | null;\n  currentSection: Section | null;\n  currentNote: Note | null;\n}\n\nconst initialState: NotebookState = {\n  items: [],\n  currentNotebook: null,\n  currentSection: null,\n  currentNote: null,\n};\n\nconst notebookSlice = createSlice({\n  name: 'notebooks',\n  initialState,\n  reducers: {\n    addNotebook: (state, action: PayloadAction<Notebook>) => {\n      state.items.push(action.payload);\n    },\n    addSection: (state, action: PayloadAction<{ notebookId: string; section: Section }>) => {\n      const { notebookId, section } = action.payload;\n      const notebook = state.items.find(nb => nb.id === notebookId);\n      if (notebook) {\n        notebook.sections.push(section);\n      }\n    },\n    setCurrentNotebook: (state, action: PayloadAction<Notebook>) => {\n      state.currentNotebook = action.payload;\n    },\n    setCurrentSection: (state, action: PayloadAction<Section>) => {\n      state.currentSection = action.payload;\n    },\n    setCurrentNote: (state, action: PayloadAction<Note>) => {\n      state.currentNote = action.payload;\n    },\n    updateNoteContent: (\n      state,\n      action: PayloadAction<{ id: string; content: Descendant[] }>\n    ) => {\n      const { id, content } = action.payload;\n      state.items.forEach((notebook: Notebook) => {\n        notebook.sections.forEach((section: Section) => {\n          const note = section.notes.find((n: Note) => n.id === id);\n          if (note) {\n            note.content = content;\n            note.updatedAt = new Date();\n          }\n        });\n      });\n    },\n    updateSectionTitle: (\n      state,\n      action: PayloadAction<{ sectionId: string; title: string }>\n    ) => {\n      const { sectionId, title } = action.payload;\n      state.items.forEach((notebook: Notebook) => {\n        const section = notebook.sections.find((s: Section) => s.id === sectionId);\n        if (section) {\n          section.title = title;\n        }\n      });\n    },\n    updateNoteTitle: (\n      state,\n      action: PayloadAction<{ noteId: string; title: string }>\n    ) => {\n      const { noteId, title } = action.payload;\n      state.items.forEach((notebook: Notebook) => {\n        notebook.sections.forEach((section: Section) => {\n          const note = section.notes.find((n: Note) => n.id === noteId);\n          if (note) {\n            note.title = title;\n          }\n        });\n      });\n    },\n    deleteSection: (\n      state,\n      action: PayloadAction<{ notebookId: string; sectionId: string }>\n    ) => {\n      const { notebookId, sectionId } = action.payload;\n      const notebook = state.items.find(nb => nb.id === notebookId);\n      if (notebook) {\n        notebook.sections = notebook.sections.filter(s => s.id !== sectionId);\n      }\n    },\n    deleteNote: (\n      state,\n      action: PayloadAction<{ sectionId: string; noteId: string }>\n    ) => {\n      const { sectionId, noteId } = action.payload;\n      state.items.forEach((notebook: Notebook) => {\n        const section = notebook.sections.find(s => s.id === sectionId);\n        if (section) {\n          section.notes = section.notes.filter(n => n.id !== noteId);\n        }\n      });\n    },\n    reorderSections: (\n      state,\n      action: PayloadAction<{ notebookId: string; sections: Section[] }>\n    ) => {\n      const { notebookId, sections } = action.payload;\n      const notebook = state.items.find(nb => nb.id === notebookId);\n      if (notebook) {\n        notebook.sections = sections;\n      }\n    },\n    reorderNotes: (\n      state,\n      action: PayloadAction<{ sectionId: string; notes: Note[] }>\n    ) => {\n      const { sectionId, notes } = action.payload;\n      state.items.forEach((notebook: Notebook) => {\n        const section = notebook.sections.find(s => s.id === sectionId);\n        if (section) {\n          section.notes = notes;\n        }\n      });\n    },\n    addNote: (\n      state,\n      action: PayloadAction<{ sectionId: string; note: Note }>\n    ) => {\n      const { sectionId, note } = action.payload;\n      state.items.forEach((notebook: Notebook) => {\n        const section = notebook.sections.find((s: Section) => s.id === sectionId);\n        if (section) {\n          section.notes.push(note);\n        }\n      });\n    },\n  },\n});\n\nexport const {\n  addNotebook,\n  addSection,\n  setCurrentNotebook,\n  setCurrentSection,\n  setCurrentNote,\n  updateNoteContent,\n  updateSectionTitle,\n  updateNoteTitle,\n  deleteSection,\n  deleteNote,\n  reorderSections,\n  reorderNotes,\n  addNote,\n} = notebookSlice.actions;\n\nexport default notebookSlice.reducer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}