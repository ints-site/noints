{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  items: [],\n  currentNotebook: null,\n  currentSection: null,\n  currentNote: null,\n  isLoading: false,\n  error: null\n};\nconst notebookSlice = createSlice({\n  name: 'notebooks',\n  initialState,\n  reducers: {\n    setNotebooks: (state, action) => {\n      state.items = action.payload;\n    },\n    addNotebook: (state, action) => {\n      state.items.push(action.payload);\n    },\n    setCurrentNotebook: (state, action) => {\n      state.currentNotebook = action.payload;\n    },\n    setCurrentSection: (state, action) => {\n      state.currentSection = action.payload;\n    },\n    setCurrentNote: (state, action) => {\n      state.currentNote = action.payload;\n    },\n    updateNoteContent: (state, action) => {\n      const {\n        id,\n        content\n      } = action.payload;\n      state.items.forEach(notebook => {\n        notebook.sections.forEach(section => {\n          const note = section.notes.find(n => n.id === id);\n          if (note) {\n            note.content = content;\n            note.updatedAt = new Date();\n          }\n        });\n      });\n    },\n    addSection: (state, action) => {\n      const {\n        notebookId,\n        section\n      } = action.payload;\n      const notebook = state.items.find(nb => nb.id === notebookId);\n      if (notebook) {\n        notebook.sections.push(section);\n      }\n    },\n    addNote: (state, action) => {\n      const {\n        sectionId,\n        note\n      } = action.payload;\n      state.items.forEach(notebook => {\n        const section = notebook.sections.find(s => s.id === sectionId);\n        if (section) {\n          section.notes.push(note);\n        }\n      });\n    },\n    updateSectionTitle: (state, action) => {\n      const {\n        sectionId,\n        title\n      } = action.payload;\n      state.items.forEach(notebook => {\n        const section = notebook.sections.find(s => s.id === sectionId);\n        if (section) {\n          section.title = title;\n        }\n      });\n    },\n    updateNoteTitle: (state, action) => {\n      const {\n        noteId,\n        title\n      } = action.payload;\n      state.items.forEach(notebook => {\n        notebook.sections.forEach(section => {\n          const note = section.notes.find(n => n.id === noteId);\n          if (note) {\n            note.title = title;\n          }\n        });\n      });\n    },\n    deleteSection: (state, action) => {\n      var _state$currentSection;\n      const {\n        notebookId,\n        sectionId\n      } = action.payload;\n      const notebook = state.items.find(nb => nb.id === notebookId);\n      if (notebook) {\n        notebook.sections = notebook.sections.filter(s => s.id !== sectionId);\n      }\n      if (((_state$currentSection = state.currentSection) === null || _state$currentSection === void 0 ? void 0 : _state$currentSection.id) === sectionId) {\n        state.currentSection = null;\n        state.currentNote = null;\n      }\n    },\n    deleteNote: (state, action) => {\n      var _state$currentNote;\n      const {\n        noteId\n      } = action.payload;\n      state.items.forEach(notebook => {\n        notebook.sections.forEach(section => {\n          section.notes = section.notes.filter(n => n.id !== noteId);\n        });\n      });\n      if (((_state$currentNote = state.currentNote) === null || _state$currentNote === void 0 ? void 0 : _state$currentNote.id) === noteId) {\n        state.currentNote = null;\n      }\n    },\n    reorderSections: (state, action) => {\n      const {\n        notebookId,\n        startIndex,\n        endIndex\n      } = action.payload;\n      const notebook = state.items.find(nb => nb.id === notebookId);\n      if (notebook) {\n        const [removed] = notebook.sections.splice(startIndex, 1);\n        notebook.sections.splice(endIndex, 0, removed);\n      }\n    },\n    reorderNotes: (state, action) => {\n      const {\n        sectionId,\n        startIndex,\n        endIndex\n      } = action.payload;\n      state.items.forEach(notebook => {\n        const section = notebook.sections.find(s => s.id === sectionId);\n        if (section) {\n          const [removed] = section.notes.splice(startIndex, 1);\n          section.notes.splice(endIndex, 0, removed);\n        }\n      });\n    }\n  }\n});\nexport const {\n  setNotebooks,\n  addNotebook,\n  setCurrentNotebook,\n  setCurrentSection,\n  setCurrentNote,\n  updateNoteContent,\n  addSection,\n  addNote,\n  updateSectionTitle,\n  updateNoteTitle,\n  deleteSection,\n  deleteNote,\n  reorderSections,\n  reorderNotes\n} = notebookSlice.actions;\nexport default notebookSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","items","currentNotebook","currentSection","currentNote","isLoading","error","notebookSlice","name","reducers","setNotebooks","state","action","payload","addNotebook","push","setCurrentNotebook","setCurrentSection","setCurrentNote","updateNoteContent","id","content","forEach","notebook","sections","section","note","notes","find","n","updatedAt","Date","addSection","notebookId","nb","addNote","sectionId","s","updateSectionTitle","title","updateNoteTitle","noteId","deleteSection","_state$currentSection","filter","deleteNote","_state$currentNote","reorderSections","startIndex","endIndex","removed","splice","reorderNotes","actions","reducer"],"sources":["C:/Users/FanYukin/codes/f/noints/client/src/store/notebookSlice.ts"],"sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { Descendant } from 'slate';\nimport { Notebook, Section, Note } from '@shared/types';\n\ninterface NotebookState {\n  items: Notebook[];\n  currentNotebook: Notebook | null;\n  currentSection: Section | null;\n  currentNote: Note | null;\n  isLoading: boolean;\n  error: string | null;\n}\n\nconst initialState: NotebookState = {\n  items: [],\n  currentNotebook: null,\n  currentSection: null,\n  currentNote: null,\n  isLoading: false,\n  error: null\n};\n\nconst notebookSlice = createSlice({\n  name: 'notebooks',\n  initialState,\n  reducers: {\n    setNotebooks: (state, action: PayloadAction<Notebook[]>) => {\n      state.items = action.payload;\n    },\n    addNotebook: (state, action: PayloadAction<Notebook>) => {\n      state.items.push(action.payload);\n    },\n    setCurrentNotebook: (state, action: PayloadAction<Notebook>) => {\n      state.currentNotebook = action.payload;\n    },\n    setCurrentSection: (state, action: PayloadAction<Section>) => {\n      state.currentSection = action.payload;\n    },\n    setCurrentNote: (state, action: PayloadAction<Note>) => {\n      state.currentNote = action.payload;\n    },\n    updateNoteContent: (\n      state,\n      action: PayloadAction<{ id: string; content: Descendant[] }>\n    ) => {\n      const { id, content } = action.payload;\n      state.items.forEach(notebook => {\n        notebook.sections.forEach((section: Section) => {\n          const note = section.notes.find((n: Note) => n.id === id);\n          if (note) {\n            note.content = content;\n            note.updatedAt = new Date();\n          }\n        });\n      });\n    },\n    addSection: (state, action: PayloadAction<{ notebookId: string; section: Section }>) => {\n      const { notebookId, section } = action.payload;\n      const notebook = state.items.find(nb => nb.id === notebookId);\n      if (notebook) {\n        notebook.sections.push(section);\n      }\n    },\n    addNote: (state, action: PayloadAction<{ sectionId: string; note: Note }>) => {\n      const { sectionId, note } = action.payload;\n      state.items.forEach(notebook => {\n        const section = notebook.sections.find(s => s.id === sectionId);\n        if (section) {\n          section.notes.push(note);\n        }\n      });\n    },\n    updateSectionTitle: (state, action: PayloadAction<{ sectionId: string; title: string }>) => {\n      const { sectionId, title } = action.payload;\n      state.items.forEach(notebook => {\n        const section = notebook.sections.find(s => s.id === sectionId);\n        if (section) {\n          section.title = title;\n        }\n      });\n    },\n    updateNoteTitle: (state, action: PayloadAction<{ noteId: string; title: string }>) => {\n      const { noteId, title } = action.payload;\n      state.items.forEach(notebook => {\n        notebook.sections.forEach((section: Section) => {\n          const note = section.notes.find((n: Note) => n.id === noteId);\n          if (note) {\n            note.title = title;\n          }\n        });\n      });\n    },\n    deleteSection: (state, action: PayloadAction<{ notebookId: string; sectionId: string }>) => {\n      const { notebookId, sectionId } = action.payload;\n      const notebook = state.items.find(nb => nb.id === notebookId);\n      if (notebook) {\n        notebook.sections = notebook.sections.filter(s => s.id !== sectionId);\n      }\n      if (state.currentSection?.id === sectionId) {\n        state.currentSection = null;\n        state.currentNote = null;\n      }\n    },\n    deleteNote: (state, action: PayloadAction<{ noteId: string }>) => {\n      const { noteId } = action.payload;\n      state.items.forEach(notebook => {\n        notebook.sections.forEach((section: Section) => {\n          section.notes = section.notes.filter(n => n.id !== noteId);\n        });\n      });\n      if (state.currentNote?.id === noteId) {\n        state.currentNote = null;\n      }\n    },\n    reorderSections: (state, action: PayloadAction<{\n      notebookId: string;\n      startIndex: number;\n      endIndex: number;\n    }>) => {\n      const { notebookId, startIndex, endIndex } = action.payload;\n      const notebook = state.items.find(nb => nb.id === notebookId);\n      if (notebook) {\n        const [removed] = notebook.sections.splice(startIndex, 1);\n        notebook.sections.splice(endIndex, 0, removed);\n      }\n    },\n    reorderNotes: (state, action: PayloadAction<{\n      sectionId: string;\n      startIndex: number;\n      endIndex: number;\n    }>) => {\n      const { sectionId, startIndex, endIndex } = action.payload;\n      state.items.forEach(notebook => {\n        const section = notebook.sections.find(s => s.id === sectionId);\n        if (section) {\n          const [removed] = section.notes.splice(startIndex, 1);\n          section.notes.splice(endIndex, 0, removed);\n        }\n      });\n    },\n  }\n});\n\nexport const { \n  setNotebooks, \n  addNotebook,\n  setCurrentNotebook,\n  setCurrentSection,\n  setCurrentNote,\n  updateNoteContent,\n  addSection,\n  addNote,\n  updateSectionTitle,\n  updateNoteTitle,\n  deleteSection,\n  deleteNote,\n  reorderSections,\n  reorderNotes\n} = notebookSlice.actions;\n\nexport default notebookSlice.reducer; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}